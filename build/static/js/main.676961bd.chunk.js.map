{"version":3,"sources":["components/Todo.js","components/TodoForm.js","components/TodoList.js","App.js","reportWebVitals.js","redux/reducers/Reducer.js","redux/reducers/CombineReducers.js","store.js","index.js"],"names":["Todo","todos","completeTodo","removeTodo","modifyTodo","map","todo","index","className","isComplete","onClick","id","text","TodoForm","props","onSubmit","e","preventDefault","Math","floor","random","input","type","placeholder","value","name","onChange","getValue","target","toggleEdit","TodoList","useState","setInput","setTodos","setToggle","todoUpdated","setUpdateTodo","test","newTodos","console","log","ele","updatedTodos","removeArr","filter","latestTodo","find","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ChangeNumber","state","action","payload","rootReducer","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","subscribe","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAuBeA,MApBf,YAAgE,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,WAC7C,OACI,mCAEQH,EAAMI,KAAI,SAACC,EAAMC,GAAP,OACN,sBAAiBC,UAAU,WAA3B,UACI,qBAAKA,UAAWF,EAAKG,WAAa,qBAAuB,YAA2BC,QAAS,kBAAMR,EAAaI,EAAKK,KAArH,SACI,+BAAOL,EAAKM,QAD2DN,EAAKK,IAGhF,sBAAKH,UAAU,UAAf,UACI,wBAAQE,QAAS,kBAAMN,EAAWE,EAAKK,KAAvC,kBACA,wBAAQD,QAAS,kBAAMP,EAAWG,EAAKK,KAAvC,yBANEJ,SCuBfM,MA5Bf,SAAkBC,GAad,OACI,uBAAMN,UAAU,YAAYO,SATX,SAAAC,GACjBA,EAAEC,iBACFH,EAAMC,SAAS,CACXJ,GAAIO,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBR,KAAME,EAAMO,SAKhB,UACI,uBACIC,KAAK,OACLC,YAAY,aACZC,MAAOV,EAAMO,MACbI,KAAK,YACLjB,UAAU,aACVkB,SAnBS,SAAAV,GACjBF,EAAMa,SAASX,EAAEY,OAAOJ,UAoBpB,wBAAQhB,UAAU,cAAlB,SAAiCM,EAAMe,WAAa,MAAQ,eCkDzDC,MAvEf,WACI,MAA0BC,mBAAS,IAAnC,mBAAOV,EAAP,KAAcW,EAAd,KACA,EAA0BD,mBAAS,IAAnC,mBAAO9B,EAAP,KAAcgC,EAAd,KACA,EAAgCF,oBAAS,GAAzC,mBAAOF,EAAP,KAAmBK,EAAnB,KACA,EAAqCH,mBAAS,MAA9C,mBAAOI,EAAP,KAAoBC,EAApB,KA0DA,OACI,sBAAK5B,UAAU,iBAAf,UACI,6CACA,cAAC,EAAD,CAAUqB,WAAYA,EAAYR,MAAOA,EAAOM,SAAUK,EAAUjB,SAvD5D,SAACT,GACb,GAAKA,EAAKM,OAAQ,QAAQyB,KAAK/B,EAAKM,MAG/B,IAAKS,IAAS,QAAQgB,KAAKhB,IAAYQ,EAiBvC,CACD,IAAMS,EAAQ,CAAIhC,GAAJ,mBAAaL,IAC3BgC,EAASK,GACTN,EAAS,SAnBTO,QAAQC,IAAI,WACZD,QAAQC,IAAIL,GACZF,EACIhC,EAAMI,KAAI,SAAAoC,GACN,OAAIA,EAAI9B,KAAOwB,GACXI,QAAQC,IAAI,QACL,2BAAKC,GAAZ,IAAiB7B,KAAMS,KAEpBoB,MAIfT,EAAS,IACTE,GAAU,GACVE,EAAc,SAqCd,cAAC,EAAD,CAAMnC,MAAOA,EAAOC,aAvBP,SAAAS,GACjB,IAAI+B,EAAezC,EAAMI,KAAI,SAAAC,GAIzB,OAHIA,EAAKK,KAAOA,IACZL,EAAKG,YAAcH,EAAKG,YAErBH,KAEX2B,EAASS,IAgB2CvC,WA5BrC,SAAAQ,GACf,IAAIgC,EAAY1C,EAAM2C,QAAO,SAAAtC,GAAI,OAAIA,EAAKK,KAAOA,KACjDsB,EAASU,IA0BmEvC,WAb7D,SAACO,GAChB,IAAIkC,EAAa5C,EAAM6C,MAAK,SAAAL,GACxB,OAAOA,EAAI9B,KAAOA,KAEtBuB,GAAU,GACVF,EAASa,EAAWjC,MACpBwB,EAAczB,UCrDPoC,MARf,WACE,OACE,qBAAKvC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSwC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCSCQ,EAdM,WAAmC,IAAlCC,EAAiC,uDAFlC,EAEuBC,EAAW,uCACnD,OAAQA,EAAOrC,MACX,IAAK,YACD,OAAOoC,EAAQC,EAAOC,QAE1B,IAAK,YACD,OAAOF,EAAQ,EAEnB,QACI,OAAOA,ICNJG,EAFKC,YAAgB,CAAEL,iBCEvBM,EAFDC,YAAYH,EAAaI,OAAOC,8BAAgCD,OAAOC,gC,QCGrFH,EAAMI,WAAU,WAAQJ,EAAMK,cAC9BC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUR,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJS,SAASC,eAAe,SAM1BzB,K","file":"static/js/main.676961bd.chunk.js","sourcesContent":["import React from 'react';\r\nimport './todo.css';\r\n\r\nfunction Todo({ todos, completeTodo, removeTodo, modifyTodo }) {\r\n    return (\r\n        <>\r\n            {\r\n                todos.map((todo, index) => (\r\n                    <div key={index} className=\"todo-row\">\r\n                        <div className={todo.isComplete ? 'todo-text complete' : 'todo-text'} key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n                            <span>{todo.text}</span>\r\n                        </div>\r\n                        <div className=\"actions\">\r\n                            <button onClick={() => modifyTodo(todo.id)}>Edit</button>\r\n                            <button onClick={() => removeTodo(todo.id)}>Delete</button>\r\n                        </div>\r\n                    </div>\r\n                ))\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Todo;\r\n","import React from 'react'\r\nimport './todo.css';\r\n\r\nfunction TodoForm(props) {\r\n\r\n    const handleChange = e => {\r\n        props.getValue(e.target.value)\r\n    }\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        props.onSubmit({\r\n            id: Math.floor(Math.random() * 10000),\r\n            text: props.input\r\n        });\r\n    }\r\n\r\n    return (\r\n        <form className='todo-form' onSubmit={handleSubmit}>\r\n            <input\r\n                type='text'\r\n                placeholder='Add a todo'\r\n                value={props.input}\r\n                name='todo-item'\r\n                className='todo-input'\r\n                onChange={handleChange}\r\n            />\r\n            <button className='todo-button'>{props.toggleEdit ? 'Add' : 'Update'}</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TodoForm\r\n","import React, { useState, useEffect } from 'react';\r\nimport './todo.css';\r\nimport Todo from './Todo';\r\nimport TodoForm from './TodoForm'\r\n\r\nfunction TodoList() {\r\n    const [input, setInput] = useState('');\r\n    const [todos, setTodos] = useState([]);\r\n    const [toggleEdit, setToggle] = useState(true);\r\n    const [todoUpdated, setUpdateTodo] = useState(null);\r\n\r\n    // useEffect(() => {\r\n    //     setTodos()\r\n    // }, [])\r\n\r\n    const addTodo = (todo) => {\r\n        if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n            return;\r\n        }\r\n        else if ((input || /^\\s*$/.test(input)) && !toggleEdit) {\r\n            console.log('Updated');\r\n            console.log(todoUpdated);\r\n            setTodos(\r\n                todos.map(ele => {\r\n                    if (ele.id === todoUpdated) {\r\n                        console.log('true');\r\n                        return { ...ele, text: input }\r\n                    }\r\n                    return ele;\r\n                })\r\n            )\r\n\r\n            setInput('');\r\n            setToggle(true);\r\n            setUpdateTodo(null);\r\n        }\r\n        else {\r\n            const newTodos = [todo, ...todos];\r\n            setTodos(newTodos);\r\n            setInput('');\r\n        }\r\n    }\r\n\r\n    const removeTodo = id => {\r\n        let removeArr = todos.filter(todo => todo.id !== id);\r\n        setTodos(removeArr);\r\n    }\r\n\r\n    const completeTodo = id => {\r\n        let updatedTodos = todos.map(todo => {\r\n            if (todo.id === id) {\r\n                todo.isComplete = !todo.isComplete;\r\n            }\r\n            return todo;\r\n        });\r\n        setTodos(updatedTodos);\r\n    }\r\n\r\n    const modifyTodo = (id) => {\r\n        let latestTodo = todos.find(ele => {\r\n            return ele.id === id\r\n        })\r\n        setToggle(false);\r\n        setInput(latestTodo.text);\r\n        setUpdateTodo(id);\r\n    }\r\n\r\n    return (\r\n        <div className=\"todo-container\">\r\n            <h2>What to do?</h2>\r\n            <TodoForm toggleEdit={toggleEdit} input={input} getValue={setInput} onSubmit={addTodo} />\r\n            <Todo todos={todos} completeTodo={completeTodo} removeTodo={removeTodo} modifyTodo={modifyTodo} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","import './App.css';\nimport TodoList from './components/TodoList'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = 0\r\n\r\nconst ChangeNumber = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'INCREMENT': {\r\n            return state + action.payload\r\n        }\r\n        case 'DECREMENT': {\r\n            return state - 1\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport default ChangeNumber;","import { combineReducers } from 'redux';\r\nimport ChangeNumber from './Reducer';\r\n\r\nconst rootReducer = combineReducers({ ChangeNumber })\r\n\r\nexport default rootReducer;","import { createStore } from 'redux';\r\nimport rootReducer from './redux/reducers/CombineReducers'\r\n\r\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store';\nimport { Provider } from 'react-redux'\nstore.subscribe(() => { store.getState() })\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}